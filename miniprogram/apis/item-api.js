"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../utils/config");
var http_client_1 = require("../utils/http-client");
var ItemApi = (function () {
    function ItemApi() {
        this.http = new http_client_1.HttpClient();
    }
    ItemApi.prototype.getTags = function () {
        return this.http.get(config_1.config.apiBaseUrl + "/item/tag");
    };
    ItemApi.prototype.getTag = function (tagId) {
        return this.http.get(config_1.config.apiBaseUrl + "/item/tag/" + tagId);
    };
    ItemApi.prototype.createTag = function (newTag) {
        return this.http.post(config_1.config.apiBaseUrl + "/item/tag", newTag);
    };
    ItemApi.prototype.updateTag = function (tagId, newTag) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/tag/" + tagId, newTag);
    };
    ItemApi.prototype.deleteTag = function (tagId) {
        return this.http.delete(config_1.config.apiBaseUrl + "/item/tag/" + tagId);
    };
    ItemApi.prototype.create = function (newItem) {
        return this.http.post(config_1.config.apiBaseUrl + "/item", newItem);
    };
    ItemApi.prototype.search = function (s) {
        return this.http.get(config_1.config.apiBaseUrl + "/item/search", { s: s });
    };
    ItemApi.prototype.query = function (page, size, tagId, classId) {
        var query = { page: page, size: size };
        if (tagId) {
            query['tagId'] = tagId;
        }
        if (classId) {
            query['classId'] = classId;
        }
        return this.http.get(config_1.config.apiBaseUrl + "/item", query);
    };
    ItemApi.prototype.queryMgr = function (page, size) {
        return this.http.get(config_1.config.apiBaseUrl + "/item/mgr", {
            page: page,
            size: size
        });
    };
    ItemApi.prototype.getOne = function (id) {
        return this.http.get(config_1.config.apiBaseUrl + "/item/" + id);
    };
    ItemApi.prototype.getDetail = function (id) {
        return this.http.get(config_1.config.apiBaseUrl + "/items/detail/" + id);
    };
    ItemApi.prototype.delete = function (id) {
        return this.http.delete(config_1.config.apiBaseUrl + "/item/" + id);
    };
    ItemApi.prototype.update = function (id, newItem) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/" + id, newItem);
    };
    ItemApi.prototype.lend = function (order) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/lend", order);
    };
    ItemApi.prototype.lendReturn = function (orderId) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/lend/return/" + orderId);
    };
    ItemApi.prototype.lendCancel = function (orderId) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/lend/cancel/" + orderId);
    };
    ItemApi.prototype.lendDelete = function (orderId) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/lend/delete/" + orderId);
    };
    ItemApi.prototype.getLendDetail = function (orderId) {
        return this.http.get(config_1.config.apiBaseUrl + "/item/lend/detail/" + orderId);
    };
    ItemApi.prototype.lendOrderHandle = function (body) {
        return this.http.put(config_1.config.apiBaseUrl + "/item/lend/handle", body);
    };
    ItemApi.prototype.getMyLendOrders = function (status, page, size) {
        return this.http.get(config_1.config.apiBaseUrl + "/item/lend/my", {
            status: status.join(','),
            page: page,
            size: size
        });
    };
    return ItemApi;
}());
exports.ItemApi = ItemApi;
//# sourceMappingURL=data:application/json;base64,