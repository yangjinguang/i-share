"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var user_api_1 = require("../../../apis/user-api");
var class_api_1 = require("../../../apis/class-api");
var student_api_1 = require("../../../apis/student-api");
Page({
    data: {
        userApi: {},
        classApi: {},
        childApi: {},
        rolesArr: ['家长', '教师'],
        rolesObj: [
            {
                index: 4,
                text: '家长'
            },
            {
                index: 3,
                text: '教师'
            }
        ],
        roleIndex: 0,
        classTree: [],
        classArr: [],
        classIndex: []
    },
    onLoad: function () {
        this.setData({
            userApi: new user_api_1.UserApi(),
            classApi: new class_api_1.ClassApi(),
            childApi: new student_api_1.StudentApi()
        });
    },
    onShow: function () {
        this.getClassTree();
    },
    onPullDownRefresh: function () {
        this.getClassTree();
    },
    getClassTree: function () {
        var _this = this;
        this.data.classApi.classTree().then(function (result) {
            var arr = [];
            arr[0] = result.map(function (i) { return i.name; });
            arr[1] = result[0].classes ? result[0].classes.map(function (i) { return i.name; }) : [];
            _this.setData({
                classTree: result,
                classArr: arr,
            });
        });
    },
    bindRoleChange: function (e) {
        this.setData({
            roleIndex: parseInt(e.detail.value)
        });
    },
    bindClassColumnChange: function (e) {
        if (e.detail['column'] === 0) {
            var gradeIndex = parseInt(e.detail.value);
            var classTree = this.data.classTree;
            this.setData({
                classArr: [
                    this.data.classArr[0],
                    classTree[gradeIndex].classes.map(function (i) { return i.name; })
                ]
            });
        }
    },
    bindClassChange: function (e) {
        var classIndex = e.detail.value;
        this.setData({
            classIndex: classIndex
        });
    },
    formSubmit: function (e) {
        var classTree = this.data.classTree;
        var formValue = e.detail.value;
        var orderData = {
            role: formValue['role'],
            studentName: formValue['studentName'],
            relation: formValue['relation']
        };
        if (formValue['class'] && formValue['class'].length > 0) {
            orderData['classId'] = classTree[formValue['class'][0]].classes[formValue['class'][1]].id;
        }
        else {
            return;
        }
        this.data.userApi.idAuth(orderData).then(function () {
            wx.navigateBack({
                delta: 1
            });
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWQtYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlkLWF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBK0M7QUFDL0MscURBQWlEO0FBRWpELHlEQUFxRDtBQUdyRCxJQUFJLENBQUM7SUFDRCxJQUFJLEVBQUU7UUFDRixPQUFPLEVBQVcsRUFBRTtRQUNwQixRQUFRLEVBQVksRUFBRTtRQUN0QixRQUFRLEVBQWMsRUFBRTtRQUN4QixRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ3RCLFFBQVEsRUFBRTtZQUNOO2dCQUNJLEtBQUssRUFBRSxDQUFDO2dCQUNSLElBQUksRUFBRSxJQUFJO2FBQ2I7WUFDRDtnQkFDSSxLQUFLLEVBQUUsQ0FBQztnQkFDUixJQUFJLEVBQUUsSUFBSTthQUNiO1NBQ0o7UUFDRCxTQUFTLEVBQUUsQ0FBQztRQUNaLFNBQVMsRUFBVyxFQUFFO1FBQ3RCLFFBQVEsRUFBYyxFQUFFO1FBQ3hCLFVBQVUsRUFBRSxFQUFFO0tBQ2pCO0lBQ0QsTUFBTTtRQUNGLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDVixPQUFPLEVBQUUsSUFBSSxrQkFBTyxFQUFFO1lBQ3RCLFFBQVEsRUFBRSxJQUFJLG9CQUFRLEVBQUU7WUFDeEIsUUFBUSxFQUFFLElBQUksd0JBQVUsRUFBRTtTQUM3QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsTUFBTTtRQUNGLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBQ0QsaUJBQWlCO1FBQ2IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFDRCxZQUFZO1FBQVosaUJBVUM7UUFURyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNO1lBQ3RDLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUNmLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFN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VXNlckFwaX0gZnJvbSAnLi4vLi4vLi4vYXBpcy91c2VyLWFwaSc7XG5pbXBvcnQge0NsYXNzQXBpfSBmcm9tICcuLi8uLi8uLi9hcGlzL2NsYXNzLWFwaSc7XG5pbXBvcnQge0dyYWRlfSBmcm9tICcuLi8uLi8uLi91dGlscy90eXBlcy9ncmFkZSc7XG5pbXBvcnQge1N0dWRlbnRBcGl9IGZyb20gJy4uLy4uLy4uL2FwaXMvc3R1ZGVudC1hcGknO1xuaW1wb3J0IHtJZEF1dGhPcmRlcn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdHlwZXMvaWQtYXV0aC1vcmRlcic7XG5cblBhZ2Uoe1xuICAgIGRhdGE6IHtcbiAgICAgICAgdXNlckFwaTogPFVzZXJBcGk+e30sXG4gICAgICAgIGNsYXNzQXBpOiA8Q2xhc3NBcGk+e30sXG4gICAgICAgIGNoaWxkQXBpOiA8U3R1ZGVudEFwaT57fSxcbiAgICAgICAgcm9sZXNBcnI6IFsn5a626ZW/JywgJ+aVmeW4iCddLFxuICAgICAgICByb2xlc09iajogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4OiA0LFxuICAgICAgICAgICAgICAgIHRleHQ6ICflrrbplb8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4OiAzLFxuICAgICAgICAgICAgICAgIHRleHQ6ICfmlZnluIgnXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHJvbGVJbmRleDogMCxcbiAgICAgICAgY2xhc3NUcmVlOiA8R3JhZGVbXT5bXSxcbiAgICAgICAgY2xhc3NBcnI6IDxzdHJpbmdbXVtdPltdLFxuICAgICAgICBjbGFzc0luZGV4OiBbXVxuICAgIH0sXG4gICAgb25Mb2FkKCkge1xuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgIHVzZXJBcGk6IG5ldyBVc2VyQXBpKCksXG4gICAgICAgICAgICBjbGFzc0FwaTogbmV3IENsYXNzQXBpKCksXG4gICAgICAgICAgICBjaGlsZEFwaTogbmV3IFN0dWRlbnRBcGkoKVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG9uU2hvdygpIHtcbiAgICAgICAgdGhpcy5nZXRDbGFzc1RyZWUoKTtcbiAgICB9LFxuICAgIG9uUHVsbERvd25SZWZyZXNoKCkge1xuICAgICAgICB0aGlzLmdldENsYXNzVHJlZSgpO1xuICAgIH0sXG4gICAgZ2V0Q2xhc3NUcmVlKCkge1xuICAgICAgICB0aGlzLmRhdGEuY2xhc3NBcGkuY2xhc3NUcmVlKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgICAgICBhcnJbMF0gPSByZXN1bHQubWFwKGkgPT4gaS5uYW1lKTtcbiAgICAgICAgICAgIGFyclsxXSA9IHJlc3VsdFswXS5jbGFzc2VzID8gcmVzdWx0WzBdLmNsYXNzZXMubWFwKGkgPT4gaS5uYW1lKSA6IFtdO1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICAgICAgY2xhc3NUcmVlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgY2xhc3NBcnI6IGFycixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgYmluZFJvbGVDaGFuZ2UoZTogYW55KSB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICByb2xlSW5kZXg6IHBhcnNlSW50KGUuZGV0YWlsLnZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGJpbmRDbGFzc0NvbHVtbkNoYW5nZShlOiBhbnkpIHtcbiAgICAgICAgaWYgKGUuZGV0YWlsWydjb2x1bW4nXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgZ3JhZGVJbmRleCA9IHBhcnNlSW50KGUuZGV0YWlsLnZhbHVlKTtcbiAgICAgICAgICAgIGxldCBjbGFzc1RyZWUgPSB0aGlzLmRhdGEuY2xhc3NUcmVlIGFzIEFycmF5PEdyYWRlPjtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgIGNsYXNzQXJyOiBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jbGFzc0FyclswXSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NUcmVlW2dyYWRlSW5kZXhdLmNsYXNzZXMubWFwKGkgPT4gaS5uYW1lKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9LFxuICAgIGJpbmRDbGFzc0NoYW5nZShlOiBhbnkpIHtcbiAgICAgICAgY29uc3QgY2xhc3NJbmRleCA9IGUuZGV0YWlsLnZhbHVlO1xuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgIGNsYXNzSW5kZXg6IGNsYXNzSW5kZXhcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBmb3JtU3VibWl0KGU6IGFueSkge1xuICAgICAgICBsZXQgY2xhc3NUcmVlID0gdGhpcy5kYXRhLmNsYXNzVHJlZSBhcyBBcnJheTxHcmFkZT47XG4gICAgICAgIGNvbnN0IGZvcm1WYWx1ZSA9IGUuZGV0YWlsLnZhbHVlO1xuICAgICAgICBjb25zdCBvcmRlckRhdGEgPSA8SWRBdXRoT3JkZXI+e1xuICAgICAgICAgICAgcm9sZTogZm9ybVZhbHVlWydyb2xlJ10sXG4gICAgICAgICAgICBzdHVkZW50TmFtZTogZm9ybVZhbHVlWydzdHVkZW50TmFtZSddLFxuICAgICAgICAgICAgcmVsYXRpb246IGZvcm1WYWx1ZVsncmVsYXRpb24nXVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZm9ybVZhbHVlWydjbGFzcyddICYmIGZvcm1WYWx1ZVsnY2xhc3MnXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvcmRlckRhdGFbJ2NsYXNzSWQnXSA9IGNsYXNzVHJlZVtmb3JtVmFsdWVbJ2NsYXNzJ11bMF1dLmNsYXNzZXNbZm9ybVZhbHVlWydjbGFzcyddWzFdXS5pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEudXNlckFwaS5pZEF1dGgob3JkZXJEYXRhKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHd4Lm5hdmlnYXRlQmFjayh7XG4gICAgICAgICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcbiJdfQ==