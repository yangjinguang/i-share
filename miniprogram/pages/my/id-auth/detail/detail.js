"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var user_api_1 = require("../../../../apis/user-api");
var student_api_1 = require("../../../../apis/student-api");
Page({
    data: {
        userApi: {},
        studentApi: {},
        idAuthOrder: {},
        students: [],
        studentsArr: [],
        studentIndex: 0,
        orderId: 0,
        isAgree: true,
        role: 0
    },
    onLoad: function (query) {
        this.setData({
            userApi: new user_api_1.UserApi(),
            studentApi: new student_api_1.StudentApi(),
            orderId: Number(query['orderId'])
        });
    },
    onShow: function () {
        this.getOrderDetail();
    },
    getOrderDetail: function () {
        var _this = this;
        if (this.data.orderId) {
            this.data.userApi.getIdAuthDetail(this.data.orderId).then(function (result) {
                _this.setData({
                    idAuthOrder: result,
                    role: result.role
                });
                if (_this.data.role === 4) {
                    _this.getStudents(result.classId);
                }
            });
        }
    },
    getStudents: function (classId) {
        var _this = this;
        this.data.studentApi.getByClass(classId).then(function (result) {
            _this.setData({
                students: result,
                studentsArr: result ? result.map(function (i) { return i.name; }) : []
            });
        });
    },
    studentSelectChange: function (e) {
        this.setData({
            studentIndex: e.detail.value
        });
    },
    agreeChange: function (e) {
        this.setData({
            isAgree: e.detail.value == 'true'
        });
        console.log(this.data);
    },
    formSubmit: function (e) {
        var postData = {
            orderId: this.data.orderId,
            agree: this.data.isAgree,
            rejectMsg: e.detail.value['rejectMsg']
        };
        if (this.data.role === 4) {
            if (this.data.students && this.data.students[this.data.studentIndex]) {
                postData['studentId'] = this.data.students[this.data.studentIndex].id;
            }
            else {
                wx.showModal({
                    title: '',
                    content: '必须选择一个孩子',
                    showCancel: false,
                    success: function () {
                    }
                });
                return;
            }
        }
        this.data.userApi.idAuthHandle(postData).then(function () {
            wx.navigateBack({
                delta: 1
            });
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGV0YWlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQWtEO0FBR2xELDREQUF3RDtBQUd4RCxJQUFJLENBQUM7SUFDRCxJQUFJLEVBQUU7UUFDRixPQUFPLEVBQVcsRUFBRTtRQUNwQixVQUFVLEVBQWMsRUFBRTtRQUMxQixXQUFXLEVBQWUsRUFBRTtRQUM1QixRQUFRLEVBQWEsRUFBRTtRQUN2QixXQUFXLEVBQVksRUFBRTtRQUN6QixZQUFZLEVBQUUsQ0FBQztRQUNmLE9BQU8sRUFBRSxDQUFDO1FBQ1YsT0FBTyxFQUFFLElBQUk7UUFDYixJQUFJLEVBQUUsQ0FBQztLQUNWO0lBQ0QsTUFBTSxZQUFDLEtBQVU7UUFDYixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1YsT0FBTyxFQUFFLElBQUksa0JBQU8sRUFBRTtZQUN0QixVQUFVLEVBQUUsSUFBSSx3QkFBVSxFQUFFO1lBQzVCLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3BDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFDRCxjQUFjO1FBQWQsaUJBWUM7UUFYRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07Z0JBQzVELEtBQUksQ0FBQyxPQUFRLENBQUM7b0JBQ1YsV0FBVyxFQUFFLE1BQU07b0JBQ25CLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtpQkFDcEIsQ0FBQyxDQUFDO2dCQUNILElBQUksS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO29CQUN0QixLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUNELFdBQVcsWUFBQyxPQUFlO1FBQTNCLGlCQU9DO1FBTkcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07WUFDaEQsS0FBSSxDQUFDLE9BQVEsQ0FBQztnQkFDVixRQUFRLEVBQUUsTUFBTTtnQkFDaEIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFXLEVBQUU7YUFDL0QsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsbUJBQW1CLFlBQUMsQ0FBTTtRQUN0QixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1YsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSztTQUMvQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsV0FBVyxZQUFDLENBQU07UUFDZCxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1YsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU07U0FDcEMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELFVBQVUsWUFBQyxDQUFNO1FBRWIsSUFBTSxRQUFRLEdBQXlCO1lBQ25DLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDMUIsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztZQUN4QixTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1NBQ3pDLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ2xFLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUN6RTtpQkFBTTtnQkFDSCxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUNULEtBQUssRUFBRSxFQUFFO29CQUNULE9BQU8sRUFBRSxVQUFVO29CQUNuQixVQUFVLEVBQUUsS0FBSztvQkFDakIsT0FBTyxFQUFFO29CQUVULENBQUM7aUJBQ0osQ0FBQyxDQUFDO2dCQUNILE9BQU87YUFDVjtTQUNKO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUNaLEtBQUssRUFBRSxDQUFDO2FBQ1gsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVc2VyQXBpfSBmcm9tICcuLi8uLi8uLi8uLi9hcGlzL3VzZXItYXBpJztcbmltcG9ydCB7SWRBdXRoT3JkZXJ9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3R5cGVzL2lkLWF1dGgtb3JkZXInO1xuaW1wb3J0IHtVc2VySWRBdXRoSGFuZGxlRGF0YX0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdHlwZXMvdXNlci1pZC1hdXRoLWhhbmRsZS1kYXRhJztcbmltcG9ydCB7U3R1ZGVudEFwaX0gZnJvbSAnLi4vLi4vLi4vLi4vYXBpcy9zdHVkZW50LWFwaSc7XG5pbXBvcnQge1N0dWRlbnR9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3R5cGVzL3N0dWRlbnQnO1xuXG5QYWdlKHtcbiAgICBkYXRhOiB7XG4gICAgICAgIHVzZXJBcGk6IDxVc2VyQXBpPnt9LFxuICAgICAgICBzdHVkZW50QXBpOiA8U3R1ZGVudEFwaT57fSxcbiAgICAgICAgaWRBdXRoT3JkZXI6IDxJZEF1dGhPcmRlcj57fSxcbiAgICAgICAgc3R1ZGVudHM6IDxTdHVkZW50W10+W10sXG4gICAgICAgIHN0dWRlbnRzQXJyOiA8c3RyaW5nW10+W10sXG4gICAgICAgIHN0dWRlbnRJbmRleDogMCxcbiAgICAgICAgb3JkZXJJZDogMCxcbiAgICAgICAgaXNBZ3JlZTogdHJ1ZSxcbiAgICAgICAgcm9sZTogMFxuICAgIH0sXG4gICAgb25Mb2FkKHF1ZXJ5OiBhbnkpIHtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICB1c2VyQXBpOiBuZXcgVXNlckFwaSgpLFxuICAgICAgICAgICAgc3R1ZGVudEFwaTogbmV3IFN0dWRlbnRBcGkoKSxcbiAgICAgICAgICAgIG9yZGVySWQ6IE51bWJlcihxdWVyeVsnb3JkZXJJZCddKVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG9uU2hvdygpIHtcbiAgICAgICAgdGhpcy5nZXRPcmRlckRldGFpbCgpO1xuICAgIH0sXG4gICAgZ2V0T3JkZXJEZXRhaWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEub3JkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnVzZXJBcGkuZ2V0SWRBdXRoRGV0YWlsKHRoaXMuZGF0YS5vcmRlcklkKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICAgICAgICAgIGlkQXV0aE9yZGVyOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IHJlc3VsdC5yb2xlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5yb2xlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U3R1ZGVudHMocmVzdWx0LmNsYXNzSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRTdHVkZW50cyhjbGFzc0lkOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhLnN0dWRlbnRBcGkuZ2V0QnlDbGFzcyhjbGFzc0lkKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgICAgICBzdHVkZW50czogcmVzdWx0LFxuICAgICAgICAgICAgICAgIHN0dWRlbnRzQXJyOiByZXN1bHQgPyByZXN1bHQubWFwKGkgPT4gaS5uYW1lKSA6IDxzdHJpbmdbXT5bXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgc3R1ZGVudFNlbGVjdENoYW5nZShlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICBzdHVkZW50SW5kZXg6IGUuZGV0YWlsLnZhbHVlXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgYWdyZWVDaGFuZ2UoZTogYW55KSB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgaXNBZ3JlZTogZS5kZXRhaWwudmFsdWUgPT0gJ3RydWUnXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEpO1xuICAgIH0sXG4gICAgZm9ybVN1Ym1pdChlOiBhbnkpIHtcblxuICAgICAgICBjb25zdCBwb3N0RGF0YSA9IDxVc2VySWRBdXRoSGFuZGxlRGF0YT57XG4gICAgICAgICAgICBvcmRlcklkOiB0aGlzLmRhdGEub3JkZXJJZCxcbiAgICAgICAgICAgIGFncmVlOiB0aGlzLmRhdGEuaXNBZ3JlZSxcbiAgICAgICAgICAgIHJlamVjdE1zZzogZS5kZXRhaWwudmFsdWVbJ3JlamVjdE1zZyddXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRhdGEucm9sZSA9PT0gNCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5zdHVkZW50cyAmJiB0aGlzLmRhdGEuc3R1ZGVudHNbdGhpcy5kYXRhLnN0dWRlbnRJbmRleF0pIHtcbiAgICAgICAgICAgICAgICBwb3N0RGF0YVsnc3R1ZGVudElkJ10gPSB0aGlzLmRhdGEuc3R1ZGVudHNbdGhpcy5kYXRhLnN0dWRlbnRJbmRleF0uaWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ+W/hemhu+mAieaLqeS4gOS4quWtqeWtkCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEudXNlckFwaS5pZEF1dGhIYW5kbGUocG9zdERhdGEpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgd3gubmF2aWdhdGVCYWNrKHtcbiAgICAgICAgICAgICAgICBkZWx0YTogMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuIl19