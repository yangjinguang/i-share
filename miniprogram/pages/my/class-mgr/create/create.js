"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var class_api_1 = require("../../../../apis/class-api");
var app = getApp();
Page({
    data: {
        classApi: {},
        type: '',
        title: '',
        gradeId: 0,
        classId: 0,
        isNew: true,
        name: '',
        profile: {}
    },
    onLoad: function (query) {
        var type = query['t'];
        var gradeId = query['gradeId'];
        var classId = query['classId'];
        var title = '';
        var isNew = true;
        if (type === 'grade') {
            isNew = !gradeId;
            title = '年级名称';
        }
        else {
            title = '班级名称';
            isNew = !classId;
        }
        this.setData({
            classApi: new class_api_1.ClassApi(),
            profile: app.globalData.profile,
            type: type || '',
            title: title,
            gradeId: gradeId || '',
            classId: classId || '',
            isNew: isNew
        });
        if (!this.data.isNew) {
            if (type === 'grade') {
                this.getGrade(this.data.gradeId);
            }
            else {
                this.getClass(this.data.classId);
            }
        }
    },
    getGrade: function (gradeId) {
        var _this = this;
        this.data.classApi.getGrade(gradeId).then(function (result) {
            _this.setData({
                name: result.name
            });
        });
    },
    getClass: function (classId) {
        var _this = this;
        this.data.classApi.getClass(classId).then(function (result) {
            _this.setData({
                name: result.name
            });
        });
    },
    formSubmit: function (e) {
        console.log(e);
        if (this.data.type === 'grade') {
            var newGrade = {
                name: e.detail.value['name']
            };
            if (this.data.isNew) {
                console.log(newGrade);
                this.data.classApi.createGrade(newGrade).then(function () {
                    wx.navigateBack({
                        delta: 1
                    });
                });
            }
            else {
                this.data.classApi.updateGrade(this.data.gradeId, newGrade).then(function () {
                    wx.navigateBack({
                        delta: 1
                    });
                });
            }
        }
        else {
            var newClass = {
                gradeId: this.data.gradeId,
                name: e.detail.value['name']
            };
            if (this.data.isNew) {
                this.data.classApi.createClass(newClass).then(function () {
                    wx.navigateBack({
                        delta: 1
                    });
                });
            }
            else {
                this.data.classApi.updateClass(this.data.classId, newClass).then(function () {
                    wx.navigateBack({
                        delta: 1
                    });
                });
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,