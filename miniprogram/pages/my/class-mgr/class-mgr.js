"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var class_api_1 = require("../../../apis/class-api");
var app = getApp();
Page({
    data: {
        classApi: {},
        gradeList: [],
        profile: {}
    },
    onLoad: function () {
        this.setData({
            classApi: new class_api_1.ClassApi(),
            profile: app.globalData.profile
        });
        console.log(this.data.profile);
    },
    onShow: function () {
        this.getGrades();
    },
    getGrades: function () {
        var _this = this;
        this.data.classApi.gradeList().then(function (result) {
            _this.setData({
                gradeList: result
            });
        });
    },
    gradeCreate: function () {
        this.toGradeCreate();
    },
    toGradeCreate: function (gradeId) {
        var url = '/pages/my/class-mgr/create/create?t=grade';
        if (gradeId) {
            url = url + '&gradeId=' + gradeId;
        }
        wx.navigateTo({
            url: url
        });
    },
    gradeAction: function (e) {
        var _this = this;
        var gradeId = e.currentTarget.dataset.gradeId;
        if (!gradeId) {
            return;
        }
        wx.showActionSheet({
            itemList: ['上移', '下移', '编辑', '删除'],
            success: function (res) {
                var _a, _b;
                switch (res.tapIndex) {
                    case 0:
                        var list = _this.data.gradeList.map(function (i) { return i.id; });
                        var index = list.indexOf(gradeId);
                        if (index > 0) {
                            _a = [list[index], list[index - 1]], list[index - 1] = _a[0], list[index] = _a[1];
                            _this.data.classApi.updateGradeOrder(list).then(function () {
                                _this.getGrades();
                            });
                        }
                        break;
                    case 1:
                        var list2 = _this.data.gradeList.map(function (i) { return i.id; });
                        var index2 = list2.indexOf(gradeId);
                        if (index2 < list2.length - 1) {
                            _b = [list2[index2 + 1], list2[index2]], list2[index2] = _b[0], list2[index2 + 1] = _b[1];
                            _this.data.classApi.updateGradeOrder(list2).then(function () {
                                _this.getGrades();
                            });
                        }
                        break;
                    case 2:
                        _this.toGradeCreate(gradeId);
                        break;
                    case 3:
                        _this.data.classApi.deleteGrade(gradeId).then(function () {
                            _this.getGrades();
                        });
                        break;
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MtbWdyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xhc3MtbWdyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscURBQWlEO0FBS2pELElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBVSxDQUFDO0FBRTdCLElBQUksQ0FBQztJQUNELElBQUksRUFBRTtRQUNGLFFBQVEsRUFBWSxFQUFFO1FBQ3RCLFNBQVMsRUFBVyxFQUFFO1FBQ3RCLE9BQU8sRUFBUSxFQUFFO0tBQ3BCO0lBQ0QsTUFBTTtRQUNGLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxRQUFRLEVBQUUsSUFBSSxvQkFBUSxFQUFFO1lBQ3hCLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU87U0FDbEMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFDRCxTQUFTO1FBQVQsaUJBTUM7UUFMRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNO1lBQ3RDLEtBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsU0FBUyxFQUFFLE1BQU07YUFDcEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsV0FBVztRQUNQLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsYUFBYSxZQUFDLE9BQWdCO1FBQzFCLElBQUksR0FBRyxHQUFHLDJDQUEyQyxDQUFDO1FBQ3RELElBQUksT0FBTyxFQUFFO1lBQ1QsR0FBRyxHQUFHLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDO1NBQ3JDO1FBQ0QsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNWLEdBQUcsRUFBRSxHQUFHO1NBQ1gsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELFdBQVcsWUFBQyxDQUFNO1FBQWxCLGlCQXdDQztRQXZDRyxJQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLE9BQU87U0FDVjtRQUNELEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDZixRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7WUFDbEMsT0FBTyxFQUFFLFVBQUMsR0FBRzs7Z0JBQ1QsUUFBUSxHQUFHLENBQUMsUUFBUSxFQUFFO29CQUNsQixLQUFLLENBQUM7d0JBQ0YsSUFBSSxJQUFJLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsRUFBSixDQUFJLENBQUMsQ0FBQzt3QkFDOUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDbEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFOzRCQUNYLG1DQUErRCxFQUE5RCx1QkFBZSxFQUFFLG1CQUFXLENBQW1DOzRCQUNoRSxLQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0NBQzNDLEtBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs0QkFDckIsQ0FBQyxDQUFDLENBQUM7eUJBQ047d0JBQ0QsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsSUFBSSxLQUFLLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsRUFBSixDQUFJLENBQUMsQ0FBQzt3QkFDL0MsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDcEMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7NEJBQzNCLHVDQUF1RSxFQUF0RSxxQkFBYSxFQUFFLHlCQUFpQixDQUF1Qzs0QkFDeEUsS0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO2dDQUM1QyxLQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7NEJBQ3JCLENBQUMsQ0FBQyxDQUFDO3lCQUNOO3dCQUNELE1BQU07b0JBQ1YsS0FBSyxDQUFDO3dCQUNGLEtBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQzVCLE1BQU07b0JBQ1YsS0FBSyxDQUFDO3dCQUNGLEtBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUM7NEJBQ3pDLEtBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDckIsQ0FBQyxDQUFDLENBQUM7d0JBQ0gsTUFBTTtpQkFDYjtZQUNMLENBQUM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDbGFzc0FwaX0gZnJvbSAnLi4vLi4vLi4vYXBpcy9jbGFzcy1hcGknO1xuaW1wb3J0IHtHcmFkZX0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdHlwZXMvZ3JhZGUnO1xuaW1wb3J0IHtJTXlBcHB9IGZyb20gJy4uLy4uLy4uL2FwcCc7XG5pbXBvcnQge1VzZXJ9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3R5cGVzL3VzZXInO1xuXG5jb25zdCBhcHAgPSBnZXRBcHA8SU15QXBwPigpO1xuXG5QYWdlKHtcbiAgICBkYXRhOiB7XG4gICAgICAgIGNsYXNzQXBpOiA8Q2xhc3NBcGk+e30sXG4gICAgICAgIGdyYWRlTGlzdDogPEdyYWRlW10+W10sXG4gICAgICAgIHByb2ZpbGU6IDxVc2VyPnt9XG4gICAgfSxcbiAgICBvbkxvYWQoKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICBjbGFzc0FwaTogbmV3IENsYXNzQXBpKCksXG4gICAgICAgICAgICBwcm9maWxlOiBhcHAuZ2xvYmFsRGF0YS5wcm9maWxlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEucHJvZmlsZSk7XG4gICAgfSxcbiAgICBvblNob3coKSB7XG4gICAgICAgIHRoaXMuZ2V0R3JhZGVzKCk7XG4gICAgfSxcbiAgICBnZXRHcmFkZXMoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jbGFzc0FwaS5ncmFkZUxpc3QoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgICAgIGdyYWRlTGlzdDogcmVzdWx0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBncmFkZUNyZWF0ZSgpIHtcbiAgICAgICAgdGhpcy50b0dyYWRlQ3JlYXRlKCk7XG4gICAgfSxcbiAgICB0b0dyYWRlQ3JlYXRlKGdyYWRlSWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHVybCA9ICcvcGFnZXMvbXkvY2xhc3MtbWdyL2NyZWF0ZS9jcmVhdGU/dD1ncmFkZSc7XG4gICAgICAgIGlmIChncmFkZUlkKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwgKyAnJmdyYWRlSWQ9JyArIGdyYWRlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgd3gubmF2aWdhdGVUbyh7XG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGdyYWRlQWN0aW9uKGU6IGFueSkge1xuICAgICAgICBjb25zdCBncmFkZUlkID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZ3JhZGVJZDtcbiAgICAgICAgaWYgKCFncmFkZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd3guc2hvd0FjdGlvblNoZWV0KHtcbiAgICAgICAgICAgIGl0ZW1MaXN0OiBbJ+S4iuenuycsICfkuIvnp7snLCAn57yW6L6RJywgJ+WIoOmZpCddLFxuICAgICAgICAgICAgc3VjY2VzczogKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVzLnRhcEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gdGhpcy5kYXRhLmdyYWRlTGlzdC5tYXAoaSA9PiBpLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGxpc3QuaW5kZXhPZihncmFkZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbGlzdFtpbmRleCAtIDFdLCBsaXN0W2luZGV4XV0gPSBbbGlzdFtpbmRleF0sIGxpc3RbaW5kZXggLSAxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNsYXNzQXBpLnVwZGF0ZUdyYWRlT3JkZXIobGlzdCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0R3JhZGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QyID0gdGhpcy5kYXRhLmdyYWRlTGlzdC5tYXAoaSA9PiBpLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleDIgPSBsaXN0Mi5pbmRleE9mKGdyYWRlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4MiA8IGxpc3QyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbGlzdDJbaW5kZXgyXSwgbGlzdDJbaW5kZXgyICsgMV1dID0gW2xpc3QyW2luZGV4MiArIDFdLCBsaXN0MltpbmRleDJdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY2xhc3NBcGkudXBkYXRlR3JhZGVPcmRlcihsaXN0MikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0R3JhZGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b0dyYWRlQ3JlYXRlKGdyYWRlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jbGFzc0FwaS5kZWxldGVHcmFkZShncmFkZUlkKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEdyYWRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuIl19