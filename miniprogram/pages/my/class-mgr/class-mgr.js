"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var class_api_1 = require("../../../apis/class-api");
var app = getApp();
Page({
    data: {
        classApi: {},
        gradeList: [],
        profile: {}
    },
    onLoad: function () {
        this.setData({
            classApi: new class_api_1.ClassApi(),
            profile: app.globalData.profile
        });
        console.log(this.data.profile);
    },
    onShow: function () {
        this.getGrades();
    },
    getGrades: function () {
        var _this = this;
        this.data.classApi.gradeList().then(function (result) {
            _this.setData({
                gradeList: result
            });
        });
    },
    gradeCreate: function () {
        this.toGradeCreate();
    },
    toGradeCreate: function (gradeId) {
        var url = '/pages/my/class-mgr/create/create?t=grade';
        if (gradeId) {
            url = url + '&gradeId=' + gradeId;
        }
        wx.navigateTo({
            url: url
        });
    },
    gradeAction: function (e) {
        var _this = this;
        var gradeId = e.currentTarget.dataset.gradeId;
        if (!gradeId) {
            return;
        }
        wx.showActionSheet({
            itemList: ['上移', '下移', '编辑', '删除'],
            success: function (res) {
                var _a, _b;
                switch (res.tapIndex) {
                    case 0:
                        var list = _this.data.gradeList.map(function (i) { return i.id; });
                        var index = list.indexOf(gradeId);
                        if (index > 0) {
                            _a = [list[index], list[index - 1]], list[index - 1] = _a[0], list[index] = _a[1];
                            _this.data.classApi.updateGradeOrder(list).then(function () {
                                _this.getGrades();
                            });
                        }
                        break;
                    case 1:
                        var list2 = _this.data.gradeList.map(function (i) { return i.id; });
                        var index2 = list2.indexOf(gradeId);
                        if (index2 < list2.length - 1) {
                            _b = [list2[index2 + 1], list2[index2]], list2[index2] = _b[0], list2[index2 + 1] = _b[1];
                            _this.data.classApi.updateGradeOrder(list2).then(function () {
                                _this.getGrades();
                            });
                        }
                        break;
                    case 2:
                        _this.toGradeCreate(gradeId);
                        break;
                    case 3:
                        _this.data.classApi.deleteGrade(gradeId).then(function () {
                            _this.getGrades();
                        });
                        break;
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MtbWdyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xhc3MtbWdyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscURBQWlEO0FBS2pELElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBVSxDQUFDO0FBRTdCLElBQUksQ0FBQztJQUNELElBQUksRUFBRTtRQUNGLFFBQVEsRUFBWSxFQUFFO1FBQ3RCLFNBQVMsRUFBVyxFQUFFO1FBQ3RCLE9BQU8sRUFBUSxFQUFFO0tBQ3BCO0lBQ0QsTUFBTTtRQUNGLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxRQUFRLEVBQUUsSUFBSSxvQkFBUSxFQUFFO1lBQ3hCLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU87U0FDbEMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFDRCxTQUFTO1FBQVQsaUJBTUM7UUFMRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNO1lBQ3RDLEtBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsU0FBUyxFQUFFLE1BQU07YUFDcEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsV0FBVztRQUNQLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsYUFBYSxFQUFiLFVBQWMsT0FBZ0I7UUFDMUIsSUFBSSxHQUFHLEdBQUcsMkNBQTJDLENBQUM7UUFDdEQsSUFBSSxPQUFPLEVBQUU7WUFDVCxHQUFHLEdBQUcsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUM7U0FDckM7UUFDRCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1YsR0FBRyxFQUFFLEdBQUc7U0FDWCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsV0FBVyxFQUFYLFVBQVksQ0FBTTtRQUFsQixpQkF3Q0M7UUF2Q0csSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixPQUFPO1NBQ1Y7UUFDRCxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQ2YsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ2xDLE9BQU8sRUFBRSxVQUFDLEdBQUc7O2dCQUNULFFBQVEsR0FBRyxDQUFDLFFBQVEsRUFBRTtvQkFDbEIsS0FBSyxDQUFDO3dCQUNGLElBQUksSUFBSSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEVBQUosQ0FBSSxDQUFDLENBQUM7d0JBQzlDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQ2xDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTs0QkFDWCxtQ0FBK0QsRUFBOUQsdUJBQWUsRUFBRSxtQkFBVyxDQUFtQzs0QkFDaEUsS0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO2dDQUMzQyxLQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7NEJBQ3JCLENBQUMsQ0FBQyxDQUFDO3lCQUNOO3dCQUNELE1BQU07b0JBQ1YsS0FBSyxDQUFDO3dCQUNGLElBQUksS0FBSyxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEVBQUosQ0FBSSxDQUFDLENBQUM7d0JBQy9DLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQ3BDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOzRCQUMzQix1Q0FBdUUsRUFBdEUscUJBQWEsRUFBRSx5QkFBaUIsQ0FBdUM7NEJBQ3hFLEtBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztnQ0FDNUMsS0FBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOzRCQUNyQixDQUFDLENBQUMsQ0FBQzt5QkFDTjt3QkFDRCxNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUM1QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixLQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDOzRCQUN6QyxLQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQ3JCLENBQUMsQ0FBQyxDQUFDO3dCQUNILE1BQU07aUJBQ2I7WUFDTCxDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2xhc3NBcGl9IGZyb20gJy4uLy4uLy4uL2FwaXMvY2xhc3MtYXBpJztcbmltcG9ydCB7R3JhZGV9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3R5cGVzL2dyYWRlJztcbmltcG9ydCB7SU15QXBwfSBmcm9tICcuLi8uLi8uLi9hcHAnO1xuaW1wb3J0IHtVc2VyfSBmcm9tICcuLi8uLi8uLi91dGlscy90eXBlcy91c2VyJztcblxuY29uc3QgYXBwID0gZ2V0QXBwPElNeUFwcD4oKTtcblxuUGFnZSh7XG4gICAgZGF0YToge1xuICAgICAgICBjbGFzc0FwaTogPENsYXNzQXBpPnt9LFxuICAgICAgICBncmFkZUxpc3Q6IDxHcmFkZVtdPltdLFxuICAgICAgICBwcm9maWxlOiA8VXNlcj57fVxuICAgIH0sXG4gICAgb25Mb2FkKCkge1xuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgY2xhc3NBcGk6IG5ldyBDbGFzc0FwaSgpLFxuICAgICAgICAgICAgcHJvZmlsZTogYXBwLmdsb2JhbERhdGEucHJvZmlsZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhLnByb2ZpbGUpO1xuICAgIH0sXG4gICAgb25TaG93KCkge1xuICAgICAgICB0aGlzLmdldEdyYWRlcygpO1xuICAgIH0sXG4gICAgZ2V0R3JhZGVzKCkge1xuICAgICAgICB0aGlzLmRhdGEuY2xhc3NBcGkuZ3JhZGVMaXN0KCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICBncmFkZUxpc3Q6IHJlc3VsdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZ3JhZGVDcmVhdGUoKSB7XG4gICAgICAgIHRoaXMudG9HcmFkZUNyZWF0ZSgpO1xuICAgIH0sXG4gICAgdG9HcmFkZUNyZWF0ZShncmFkZUlkPzogc3RyaW5nKSB7XG4gICAgICAgIGxldCB1cmwgPSAnL3BhZ2VzL215L2NsYXNzLW1nci9jcmVhdGUvY3JlYXRlP3Q9Z3JhZGUnO1xuICAgICAgICBpZiAoZ3JhZGVJZCkge1xuICAgICAgICAgICAgdXJsID0gdXJsICsgJyZncmFkZUlkPScgKyBncmFkZUlkO1xuICAgICAgICB9XG4gICAgICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBncmFkZUFjdGlvbihlOiBhbnkpIHtcbiAgICAgICAgY29uc3QgZ3JhZGVJZCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmdyYWRlSWQ7XG4gICAgICAgIGlmICghZ3JhZGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHd4LnNob3dBY3Rpb25TaGVldCh7XG4gICAgICAgICAgICBpdGVtTGlzdDogWyfkuIrnp7snLCAn5LiL56e7JywgJ+e8lui+kScsICfliKDpmaQnXSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlcy50YXBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHRoaXMuZGF0YS5ncmFkZUxpc3QubWFwKGkgPT4gaS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBsaXN0LmluZGV4T2YoZ3JhZGVJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2xpc3RbaW5kZXggLSAxXSwgbGlzdFtpbmRleF1dID0gW2xpc3RbaW5kZXhdLCBsaXN0W2luZGV4IC0gMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jbGFzc0FwaS51cGRhdGVHcmFkZU9yZGVyKGxpc3QpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEdyYWRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0MiA9IHRoaXMuZGF0YS5ncmFkZUxpc3QubWFwKGkgPT4gaS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXgyID0gbGlzdDIuaW5kZXhPZihncmFkZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleDIgPCBsaXN0Mi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2xpc3QyW2luZGV4Ml0sIGxpc3QyW2luZGV4MiArIDFdXSA9IFtsaXN0MltpbmRleDIgKyAxXSwgbGlzdDJbaW5kZXgyXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNsYXNzQXBpLnVwZGF0ZUdyYWRlT3JkZXIobGlzdDIpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEdyYWRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9HcmFkZUNyZWF0ZShncmFkZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY2xhc3NBcGkuZGVsZXRlR3JhZGUoZ3JhZGVJZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRHcmFkZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbiJdfQ==