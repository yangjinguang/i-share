"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var upload_video_item_1 = require("../../../utils/types/upload-video-item");
var item_api_1 = require("../../../apis/item-api");
var user_api_1 = require("../../../apis/user-api");
var share_api_1 = require("../../../apis/share-api");
var settings_api_1 = require("../../../apis/settings-api");
var student_api_1 = require("../../../apis/student-api");
Page({
    data: {
        userApi: {},
        itemApi: {},
        shareApi: {},
        settingsApi: {},
        studentApi: {},
        selectedVideo: {},
        upToken: '',
        itemLendOrders: {},
        itemLendOrdersArr: [],
        itemLendOrdersIndex: 0,
        profile: {},
        students: [],
        studentArr: [],
        studentIndex: 0
    },
    onLoad: function () {
        this.setData({
            userApi: new user_api_1.UserApi(),
            itemApi: new item_api_1.ItemApi(),
            shareApi: new share_api_1.ShareApi(),
            settingsApi: new settings_api_1.SettingsApi(),
            studentApi: new student_api_1.StudentApi()
        });
    },
    onShow: function () {
        var _this = this;
        this.getMyItems();
        this.getChildren();
        this.data.settingsApi.uploadToken().then(function (result) {
            _this.setData({
                upToken: result
            });
        });
    },
    bindRecordChange: function (e) {
        this.setData({
            itemLendOrdersIndex: e.detail.value
        });
    },
    getChildren: function () {
        var _this = this;
        this.data.studentApi.getMy().then(function (result) {
            _this.setData({
                students: result,
                studentArr: result.map(function (i) { return i.name; })
            });
            console.log(_this.data.studentArr);
        });
    },
    bindChildChange: function (e) {
        this.setData({
            childIndex: e.detail.value
        });
    },
    getMyItems: function () {
        var _this = this;
        this.data.itemApi.getMyLendOrders([2], 1, 9999).then(function (result) {
            _this.setData({
                itemLendOrders: result.list,
                itemLendOrdersArr: result && result.list ? result.list.map(function (i) { return i.itemTitle; }) : []
            });
        });
    },
    chooseVideo: function () {
        var _this = this;
        wx.chooseVideo({
            sourceType: ['camera', 'album'],
            maxDuration: 60,
            success: function (res) {
                console.log(res);
                var fileItem = new upload_video_item_1.UploadVideoItemObj(_this.data.upToken, res, function (result) {
                    _this.setData({
                        selectedVideo: result
                    });
                });
                fileItem.upload();
                _this.setData({
                    selectedVideo: fileItem
                });
            }
        });
    },
    formSubmit: function (e) {
        var lendOrder = this.data.itemLendOrders[this.data.itemLendOrdersIndex];
        var student = this.data.students[this.data.studentIndex];
        var selectedVideo = this.data.selectedVideo;
        if (!selectedVideo.success) {
            wx.showToast({
                image: '/icons/exclamation-circle.png',
                title: '视频未成功上传'
            });
            return;
        }
        var newShare = {
            itemId: lendOrder.itemId,
            studentId: student.id,
            media: {
                path: selectedVideo.fileName,
                duration: selectedVideo.duration,
                size: selectedVideo.size,
                width: selectedVideo.width,
                height: selectedVideo.height
            },
            desc: e.detail.value['desc']
        };
        this.data.shareApi.create(newShare).then(function (result) {
            console.log(result);
            wx.navigateBack({
                delta: 1
            });
        });
    }
});
//# sourceMappingURL=data:application/json;base64,