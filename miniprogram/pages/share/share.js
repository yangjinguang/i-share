"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var share_api_1 = require("../../apis/share-api");
var utils_1 = require("../../utils/utils");
var comment_api_1 = require("../../apis/comment-api");
var class_api_1 = require("../../apis/class-api");
var login_1 = require("../../utils/login");
var app = getApp();
Page({
    data: {
        profile: {},
        shareApi: {},
        commentApi: {},
        classApi: {},
        shares: [],
        sharePageData: {
            page: 1,
            size: 20
        },
        commentInputShown: false,
        selectedShare: {},
        classes: [],
        classesArr: [],
        classIndex: 0,
        filterClassId: 0
    },
    onLoad: function () {
        this.setData({
            shareApi: new share_api_1.ShareApi(),
            commentApi: new comment_api_1.CommentApi(),
            classApi: new class_api_1.ClassApi()
        });
    },
    onShow: function () {
        var _this = this;
        login_1.GetProfile(app, function (profile) {
            _this.setData({
                profile: profile,
            });
            _this.getClassTree();
            _this.getShares(1);
        });
    },
    getClassTree: function () {
        var _this = this;
        this.data.classApi.classList().then(function (result) {
            var classesArr = ['全部'];
            result.forEach(function (c) {
                classesArr.push(c.gradeName + ' ' + c.name);
            });
            _this.setData({
                classes: result,
                classTree: result,
                classesArr: classesArr
            });
        });
    },
    getShares: function (page, classId) {
        var _this = this;
        if (this.data.sharePageData.last && page > 1) {
            return;
        }
        classId = classId || this.data.filterClassId;
        page = page || this.data.sharePageData.page;
        this.data.shareApi.query(this.data.filterClassId, page, this.data.sharePageData.size).then(function (result) {
            if (result.list === null) {
                return;
            }
            utils_1.Utils.shareSerialize.apply(utils_1.Utils, [1, _this.data.profile].concat(result.list));
            var shares = _this.data.shares || [];
            if (page && page > 1) {
                if (result.list && result.list.length > 0) {
                    shares = shares.concat(result.list);
                }
            }
            else {
                shares = result.list;
            }
            _this.setData({
                shares: shares,
                sharePageData: result.pagination
            });
        });
    },
    getLikes: function (shareId) {
        var _this = this;
        this.data.shareApi.getLikes(shareId).then(function (likes) {
            _this.setData({
                shares: _this.data.shares.map(function (i) {
                    if (i.id === shareId) {
                        i.liked = likes.findIndex(function (j) { return j.id === _this.data.profile.id; }) > -1;
                        i.likes = likes;
                    }
                    return i;
                })
            });
        });
    },
    getComments: function (shareId) {
        var _this = this;
        this.data.shareApi.getComments(shareId).then(function (comments) {
            _this.setData({
                shares: _this.data.shares.map(function (i) {
                    if (i.id === shareId) {
                        i.comments = comments;
                    }
                    return i;
                }),
                commentInputShown: false
            });
        });
    },
    bindClassFilterChange: function (e) {
        console.log(e.detail.value);
        if (this.data.classIndex === e.detail.value) {
            return;
        }
        var classId = 0;
        if (e.detail.value > 0) {
            classId = this.data.classes[e.detail.value - 1].id;
        }
        this.setData({
            classIndex: e.detail.value,
            filterClassId: classId
        });
        this.getShares(1, classId);
    },
    shareLike: function (e) {
        var _this = this;
        var shareId = e.currentTarget.dataset['shareId'];
        this.data.shareApi.like(shareId).then(function () {
            _this.getLikes(shareId);
        });
    },
    showCommentInput: function (e) {
        var findShare = this.data.shares.find(function (i) { return i.id == e.currentTarget.dataset['shareId']; });
        if (!findShare) {
            return;
        }
        this.setData({
            commentInputShown: true,
            selectedShare: findShare,
        });
    },
    hideCommentInput: function () {
        this.setData({
            commentInputShown: false,
        });
    },
    sendComment: function (e) {
        var _this = this;
        var selectedShare = this.data.selectedShare;
        if (!selectedShare) {
            wx.showToast({
                title: '未知错误',
                image: '/icons/exclamation-circle.png'
            });
            return;
        }
        this.data.shareApi.comment(selectedShare.id, e.detail.value['body']).then(function () {
            _this.getComments(selectedShare.id);
        });
    },
    commentAction: function (e) {
        var _this = this;
        var shareId = e.currentTarget.dataset['shareId'];
        var commentId = e.currentTarget.dataset['commentId'];
        if (!shareId || !commentId) {
            return;
        }
        wx.showActionSheet({
            itemList: ['撤回'],
            success: function (res) {
                switch (res.tapIndex) {
                    case 0:
                        _this.data.commentApi.delete(e.currentTarget.dataset['commentId']).then(function () {
                            _this.setData({
                                shares: _this.data.shares.map(function (i) {
                                    if (i.id === shareId) {
                                        i.comments = i.comments.filter(function (j) { return j.id !== commentId; });
                                    }
                                    return i;
                                })
                            });
                        });
                        break;
                }
            }
        });
    },
    getMore: function () {
        this.getShares(this.data.sharePageData.page + 1);
    }
});
//# sourceMappingURL=data:application/json;base64,