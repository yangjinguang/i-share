"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var item_api_1 = require("../../apis/item-api");
var class_api_1 = require("../../apis/class-api");
Page({
    data: {
        itemApi: {},
        classApi: {},
        tags: [],
        tagsArr: [],
        items: [],
        classes: [],
        classTree: [],
        classesArr: [],
        classIndex: 0,
        tagIndex: 0,
        filterTagId: 0,
        filterClassId: 0,
        page: 1,
        searchTimer: 0,
        searchResult: []
    },
    onLoad: function () {
        this.setData({
            itemApi: new item_api_1.ItemApi(),
            classApi: new class_api_1.ClassApi()
        });
    },
    onShow: function () {
        var _this = this;
        this.setData({
            tagsArr: [],
            items: [],
            classes: [],
            classTree: [],
            classesArr: [],
            classIndex: 0,
            tagIndex: 0,
            tagId: 0,
            page: 1
        });
        this.data.classApi.classList().then(function (result) {
            var classesArr = ['全部'];
            result.forEach(function (c) {
                classesArr.push(c.gradeName + ' ' + c.name);
            });
            _this.setData({
                classes: result,
                classesArr: classesArr
            });
        });
        this.data.itemApi.getTags().then(function (result) {
            _this.setData({
                tags: result,
                tagsArr: ['全部'].concat(result.map(function (i) { return i.name; }))
            });
        });
        this.itemsQuery();
    },
    itemsQuery: function (page) {
        var _this = this;
        page = page || this.data.page;
        var tagId = this.data.filterTagId;
        var classId = this.data.filterClassId;
        this.data.itemApi.query(page, 20, tagId, classId).then(function (result) {
            var items = _this.data.items || [];
            if (result.list && result.list.length > 0) {
                items = items.concat(result.list);
            }
            _this.setData({
                items: items,
                page: result.pagination.page
            });
        });
    },
    bindTagFilterChange: function (e) {
        var index = e.detail.value;
        var tagId = 0;
        if (index > 0) {
            tagId = this.data.tags[index - 1].id;
        }
        if (index !== this.data.tagIndex) {
            this.setData({
                tagIndex: index,
                filterTagId: tagId,
                items: [],
                page: 1
            });
            this.itemsQuery(this.data.page);
        }
    },
    bindClassFilterChange: function (e) {
        var index = e.detail.value;
        var classId = 0;
        if (index > 0) {
            classId = this.data.classes[index - 1].id;
        }
        if (index !== this.data.classIndex) {
            this.setData({
                classIndex: e.detail.value,
                filterClassId: classId,
                items: [],
                page: 1
            });
            this.itemsQuery(this.data.page);
        }
    },
    toLoan: function (e) {
        wx.navigateTo({
            url: "/pages/item/loan/loan?id=" + e.currentTarget.dataset.itemId
        });
    },
    getMore: function (e) {
        console.log(e);
        this.itemsQuery(this.data.page + 1);
    },
    showInput: function () {
        this.setData({
            inputShowed: true
        });
    },
    hideInput: function () {
        this.setData({
            inputVal: '',
            inputShowed: false
        });
    },
    clearInput: function () {
        this.setData({
            inputVal: ''
        });
    },
    inputTyping: function (e) {
        var _this = this;
        this.setData({
            searchTimer: new Date().getTime()
        });
        setTimeout(function () {
            if (new Date().getTime() - _this.data.searchTimer >= 500) {
                _this.data.itemApi.search(e.detail.value).then(function (result) {
                    _this.setData({
                        searchResult: result,
                        inputVal: e.detail.value
                    });
                });
            }
        }, 500);
    },
});
//# sourceMappingURL=data:application/json;base64,