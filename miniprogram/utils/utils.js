"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = (function () {
    function Utils() {
    }
    Utils.formatNumber = function (n) {
        var str = n.toString();
        return str[1] ? str : '0' + str;
    };
    Utils.formatTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hour = date.getHours();
        var minute = date.getMinutes();
        var second = date.getSeconds();
        return [year, month, day].map(this.formatNumber).join('/') + ' ' + [hour, minute, second].map(this.formatNumber).join(':');
    };
    Utils.dateFormat = function (date, fmt) {
        var o = {
            'M+': date.getMonth() + 1,
            'd+': date.getDate(),
            'h+': date.getHours(),
            'm+': date.getMinutes(),
            's+': date.getSeconds(),
            'q+': Math.floor((date.getMonth() + 3) / 3),
            'S': date.getMilliseconds()
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
        for (var k in o) {
            if (new RegExp('(' + k + ')').test(fmt))
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));
        }
        return fmt;
    };
    Utils.timeDiff = function (date) {
        var sTime = date.getTime();
        var nowTime = new Date().getTime();
        var d = (nowTime - sTime) / 1000;
        if (d < 60) {
            return Math.floor(d) + " \u79D2\u524D";
        }
        else if (d < 60 * 60) {
            return Math.floor(d / 60) + " \u5206\u949F\u524D";
        }
        else if (d < 60 * 60 * 24) {
            return Math.floor(d / 60 / 60) + " \u5C0F\u65F6\u524D";
        }
        else if (d < 60 * 60 * 24 * 7) {
            return Math.floor(d / 60 / 60 / 24) + " \u5929\u524D";
        }
        else {
            return this.dateFormat(date, 'yyyy-MM-dd hh:mm:ss');
        }
    };
    Utils.childSerialize = function () {
        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments[_i];
        }
        if (!children) {
            return;
        }
        children.map(function (i) {
            i.classView = i.grade.name + " " + i.class.name;
            return i;
        });
    };
    Utils.shareSerialize = function (alpha) {
        var _this = this;
        var shares = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            shares[_i - 1] = arguments[_i];
        }
        if (!shares) {
            return;
        }
        shares.map(function (i) {
            var s = i.video.height / i.video.width;
            if (i.video.width >= i.video.height) {
                if (i.video.width > 200) {
                    i.video.vWidth = 200 * alpha + 'px';
                    i.video.vHeight = 200 * s * alpha + 'px';
                }
            }
            else {
                if (i.video.height > 200) {
                    i.video.vHeight = 200 * alpha + 'px';
                    i.video.vWidth = 200 / s * alpha + 'px';
                }
            }
            i.timeDiff = _this.timeDiff(i.createdAt);
            _this.childSerialize(i.child);
            i.likeUsersView = _this.usersNameStr(i.likeUsers);
            return i;
        });
    };
    Utils.usersNameStr = function (users) {
        if (!users) {
            return '';
        }
        return users.map(function (i) {
            return i.nickName;
        }).join(',');
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=data:application/json;base64,