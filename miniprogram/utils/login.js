"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var auth_api_1 = require("../apis/auth-api");
var user_api_1 = require("../apis/user-api");
function Login(cb) {
    var authApi = new auth_api_1.AuthApi();
    wx.login({
        success: function (_res) {
            wx.getSetting({
                success: function (res) {
                    if (res.authSetting['scope.userInfo']) {
                        wx.getUserInfo({
                            success: function (res) {
                                authApi.auth({
                                    code: _res.code,
                                    encryptedData: res.encryptedData,
                                    iv: res.iv,
                                    rawData: res.rawData,
                                    signature: res.signature
                                }).then((function (authRes) {
                                    try {
                                        wx.setStorageSync('accessToken', authRes.data.accessToken);
                                    }
                                    catch (e) {
                                    }
                                    cb(authRes.data.profile);
                                }));
                            }
                        });
                    }
                }
            });
        },
        fail: function (_err) {
            console.log(_err);
        }
    });
}
exports.Login = Login;
function CheckLoginStatus(successCb, failCb) {
    console.log(111);
    var clearLoginStatus = function () {
        wx.removeStorageSync('accessToken');
        wx.switchTab({
            url: '/pages/my/my'
        });
    };
    var token = wx.getStorageSync('accessToken');
    if (!token) {
        clearLoginStatus();
        return;
    }
    wx.checkSession({
        success: function () {
            wx.getSetting({
                success: function (res) {
                    console.log(res);
                    if (res.authSetting['scope.userInfo']) {
                        wx.getUserInfo({
                            success: function (res) {
                                successCb(res);
                            }
                        });
                    }
                    else {
                        failCb && failCb();
                        clearLoginStatus();
                    }
                },
                fail: function () {
                    failCb && failCb();
                    clearLoginStatus();
                }
            });
        },
        fail: function () {
            failCb && failCb();
            clearLoginStatus();
        }
    });
}
exports.CheckLoginStatus = CheckLoginStatus;
function GetProfile(app, cb) {
    var userApi = new user_api_1.UserApi();
    userApi.profile().then(function (res) {
        ProfileParse(app, res, cb);
    });
}
exports.GetProfile = GetProfile;
function ProfileParse(app, profile, cb) {
    var roleTrans = ['', '游客', '管理员', '教师', '家长'];
    var roles = profile.roles.filter(function (r) { return r !== 0; }).map(function (r) { return roleTrans[r]; });
    if (roles.length <= 0) {
        roles.push('游客');
    }
    profile.isAdmin = profile.roles.indexOf(2) > -1;
    profile.isTeacher = profile.roles.indexOf(3) > -1;
    app.globalData.profile = profile;
    if (app.userInfoReadyCallback) {
        app.userInfoReadyCallback(profile);
    }
    cb(app.globalData.profile);
}
exports.ProfileParse = ProfileParse;
//# sourceMappingURL=data:application/json;base64,