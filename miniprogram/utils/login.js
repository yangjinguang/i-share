"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var auth_api_1 = require("../apis/auth-api");
function Login(cb) {
    var authApi = new auth_api_1.AuthApi();
    wx.login({
        success: function (_res) {
            wx.getSetting({
                success: function (res) {
                    if (res.authSetting['scope.userInfo']) {
                        wx.getUserInfo({
                            success: function (res) {
                                authApi.auth({
                                    code: _res.code,
                                    encryptedData: res.encryptedData,
                                    iv: res.iv,
                                    rawData: res.rawData,
                                    signature: res.signature
                                }).then((function (authRes) {
                                    try {
                                        wx.setStorageSync('accessToken', authRes.data.accessToken);
                                    }
                                    catch (e) {
                                    }
                                    cb(authRes.data.profile);
                                }));
                            }
                        });
                    }
                }
            });
        },
        fail: function (_err) {
            console.log(_err);
        }
    });
}
exports.Login = Login;
function GetProfile(app, cb) {
    if (!app.globalData.isLogin) {
        app.profileReadyCallback = function (res) {
            cb(res);
        };
    }
    else {
        cb(app.globalData.profile);
    }
}
exports.GetProfile = GetProfile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDZDQUF1RDtBQUl2RCxTQUFnQixLQUFLLENBQUMsRUFBMkI7SUFDN0MsSUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBTyxFQUFFLENBQUM7SUFFOUIsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNMLE9BQU8sRUFBRSxVQUFDLElBQUk7WUFFVixFQUFFLENBQUMsVUFBVSxDQUFDO2dCQUNWLE9BQU8sRUFBRSxVQUFDLEdBQUc7b0JBQ1QsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7d0JBRW5DLEVBQUUsQ0FBQyxXQUFXLENBQUM7NEJBQ1gsT0FBTyxFQUFFLFVBQUEsR0FBRztnQ0FDUixPQUFPLENBQUMsSUFBSSxDQUFlO29DQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0NBQ2YsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhO29DQUNoQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0NBQ1YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO29DQUNwQixTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVM7aUNBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFBLE9BQU87b0NBQ1osSUFBSTt3Q0FDQSxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3FDQUM5RDtvQ0FBQyxPQUFPLENBQUMsRUFBRTtxQ0FDWDtvQ0FDRCxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQ0FDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDUixDQUFDO3lCQUNKLENBQUMsQ0FBQztxQkFDTjtnQkFDTCxDQUFDO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUNELElBQUksRUFBRSxVQUFDLElBQUk7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLENBQUM7S0FDSixDQUFDLENBQUM7QUFDUCxDQUFDO0FBbkNELHNCQW1DQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxHQUFXLEVBQUUsRUFBNEI7SUFDaEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1FBQ3pCLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxVQUFBLEdBQUc7WUFDMUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDO0tBQ0w7U0FBTTtRQUNILEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlCO0FBQ0wsQ0FBQztBQVJELGdDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IEdldFVzZXJJbmZvU3VjY2Vzc0NhbGxiYWNrUmVzdWx0ID0gd3guR2V0VXNlckluZm9TdWNjZXNzQ2FsbGJhY2tSZXN1bHQ7XG5pbXBvcnQge0F1dGhBcGksIEF1dGhQb3N0RGF0YX0gZnJvbSAnLi4vYXBpcy9hdXRoLWFwaSc7XG5pbXBvcnQge1VzZXJ9IGZyb20gJy4vdHlwZXMvdXNlcic7XG5pbXBvcnQge0lNeUFwcH0gZnJvbSAnLi4vYXBwJztcblxuZXhwb3J0IGZ1bmN0aW9uIExvZ2luKGNiOiAocHJvZmlsZTogVXNlcikgPT4gdm9pZCkge1xuICAgIGNvbnN0IGF1dGhBcGkgPSBuZXcgQXV0aEFwaSgpO1xuICAgIC8vIOeZu+W9lVxuICAgIHd4LmxvZ2luKHtcbiAgICAgICAgc3VjY2VzczogKF9yZXMpID0+IHtcbiAgICAgICAgICAgIC8vIOiOt+WPlueUqOaIt+S/oeaBr1xuICAgICAgICAgICAgd3guZ2V0U2V0dGluZyh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmF1dGhTZXR0aW5nWydzY29wZS51c2VySW5mbyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlt7Lnu4/mjojmnYPvvIzlj6/ku6Xnm7TmjqXosIPnlKggZ2V0VXNlckluZm8g6I635Y+W5aS05YOP5pi156ew77yM5LiN5Lya5by55qGGXG4gICAgICAgICAgICAgICAgICAgICAgICB3eC5nZXRVc2VySW5mbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aEFwaS5hdXRoKDxBdXRoUG9zdERhdGE+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogX3Jlcy5jb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkRGF0YTogcmVzLmVuY3J5cHRlZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdjogcmVzLml2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3RGF0YTogcmVzLnJhd0RhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IHJlcy5zaWduYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoYXV0aFJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdhY2Nlc3NUb2tlbicsIGF1dGhSZXMuZGF0YS5hY2Nlc3NUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYihhdXRoUmVzLmRhdGEucHJvZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBmYWlsOiAoX2VycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coX2Vycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldFByb2ZpbGUoYXBwOiBJTXlBcHAsIGNiOiAocHJvZmlsZT86IFVzZXIpID0+IHZvaWQpIHtcbiAgICBpZiAoIWFwcC5nbG9iYWxEYXRhLmlzTG9naW4pIHtcbiAgICAgICAgYXBwLnByb2ZpbGVSZWFkeUNhbGxiYWNrID0gcmVzID0+IHtcbiAgICAgICAgICAgIGNiKHJlcyk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2IoYXBwLmdsb2JhbERhdGEucHJvZmlsZSk7XG4gICAgfVxufVxuIl19