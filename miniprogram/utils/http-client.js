"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient = (function () {
    function HttpClient() {
        this.header = {
            'content-type': 'application/json'
        };
    }
    HttpClient.prototype.urlGen = function (url, query) {
        var queryArr = [];
        Object.keys(query).forEach(function (key) {
            queryArr.push(key + '=' + query[key]);
        });
        if (queryArr.length > 0) {
            return url + "?" + queryArr.join('&');
        }
        else {
            return url;
        }
    };
    HttpClient.prototype.headerGen = function (header) {
        var token = wx.getStorageSync('accessToken');
        if (token) {
            this.header['Authorization'] = token;
        }
        if (header) {
            return Object.assign(this.header, header);
        }
        return this.header;
    };
    HttpClient.prototype.errorHandler = function (res) {
        var apiRes = res.data;
        switch (res.statusCode) {
            case 401:
                wx.removeStorageSync('accessToken');
                wx.switchTab({
                    url: '/pages/my/my'
                });
                break;
            case 400:
            case 500:
                wx.showToast({
                    title: apiRes.message || '未知错误',
                    icon: 'none',
                    duration: 1000
                });
                break;
            default:
                break;
        }
    };
    HttpClient.prototype.get = function (url, query, header) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            wx.request({
                url: query ? _this.urlGen(url, query) : url,
                method: 'GET',
                header: _this.headerGen(header),
                success: function (res) {
                    _this.errorHandler(res);
                    var resData = res.data;
                    if (resData.code != 200) {
                        reject(resData);
                    }
                    else {
                        resolve(resData.data);
                    }
                },
                fail: function (err) {
                    reject(err);
                }
            });
        });
    };
    HttpClient.prototype.post = function (url, data, header) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            wx.request({
                url: url,
                method: 'POST',
                header: _this.headerGen(header),
                data: data,
                success: function (res) {
                    _this.errorHandler(res);
                    var resData = res.data;
                    if (resData.code != 200) {
                        reject(resData);
                    }
                    else {
                        resolve(resData.data);
                    }
                },
                fail: function (err) {
                    reject(err);
                }
            });
        });
    };
    HttpClient.prototype.put = function (url, data, header) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            wx.request({
                url: url,
                method: 'PUT',
                header: _this.headerGen(header),
                data: data,
                success: function (res) {
                    _this.errorHandler(res);
                    var resData = res.data;
                    if (resData.code != 200) {
                        reject(resData);
                    }
                    else {
                        resolve(resData.data);
                    }
                },
                fail: function (err) {
                    reject(err);
                }
            });
        });
    };
    HttpClient.prototype.delete = function (url, query, header) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            wx.request({
                url: query ? _this.urlGen(url, query) : url,
                method: 'DELETE',
                header: _this.headerGen(header),
                success: function (res) {
                    _this.errorHandler(res);
                    var resData = res.data;
                    if (resData.code != 200) {
                        reject(resData);
                    }
                    else {
                        resolve(resData.data);
                    }
                },
                fail: function (err) {
                    reject(err);
                }
            });
        });
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
//# sourceMappingURL=data:application/json;base64,