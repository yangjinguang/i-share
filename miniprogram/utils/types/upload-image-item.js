"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_upload_1 = require("../file-upload");
var UploadImageItemObj = (function () {
    function UploadImageItemObj(upToken, path, fileNamePrefix, onChange) {
        this.upToken = upToken;
        this.tempPath = path;
        var filePathSplit = this.tempPath.split('.');
        var suffix = filePathSplit[filePathSplit.length - 1];
        this.fileName = fileNamePrefix + "_" + Math.random().toString(36).substr(2) + "_" + new Date().getTime() + "." + suffix;
        this.progress = 0;
        this.success = false;
        this.completed = false;
        this.onChange = onChange;
    }
    UploadImageItemObj.prototype.upload = function () {
        var _this = this;
        var uploadTask = file_upload_1.qiniuFileUpload(this.tempPath, this.fileName, this.upToken, function () {
            _this.completed = true;
            _this.success = true;
            _this.onChange(_this);
        }, function () {
            _this.completed = true;
            _this.success = false;
            _this.onChange(_this);
        });
        uploadTask.onProgressUpdate(function (res) {
            _this.progress = res.progress;
            _this.onChange(_this);
        });
    };
    ;
    return UploadImageItemObj;
}());
exports.UploadImageItemObj = UploadImageItemObj;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWltYWdlLWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1cGxvYWQtaW1hZ2UtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUErQztBQVkvQztJQVNJLDRCQUFZLE9BQWUsRUFBRSxJQUFZLEVBQUUsY0FBc0IsRUFBRSxRQUErQztRQUM5RyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxHQUFNLGNBQWMsU0FBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxTQUFJLE1BQVEsQ0FBQztRQUM5RyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsbUNBQU0sR0FBTjtRQUFBLGlCQWNDO1FBYkcsSUFBTSxVQUFVLEdBQUcsNkJBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUMzRSxLQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixLQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsRUFBRTtZQUNDLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsVUFBQSxHQUFHO1lBQzNCLEtBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUM3QixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUFBLENBQUM7SUFDTix5QkFBQztBQUFELENBQUMsQUFwQ0QsSUFvQ0M7QUFwQ1ksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtxaW5pdUZpbGVVcGxvYWR9IGZyb20gJy4uL2ZpbGUtdXBsb2FkJztcblxuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRJbWFnZUl0ZW0ge1xuICAgIHRlbXBQYXRoOiBzdHJpbmc7XG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICBwcm9ncmVzczogbnVtYmVyO1xuICAgIGNvbXBsZXRlZDogYm9vbGVhbjtcbiAgICBzdWNjZXNzOiBib29sZWFuO1xuXG4gICAgdXBsb2FkOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVXBsb2FkSW1hZ2VJdGVtT2JqIGltcGxlbWVudHMgVXBsb2FkSW1hZ2VJdGVtIHtcbiAgICBwdWJsaWMgY29tcGxldGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBmaWxlTmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBwcm9ncmVzczogbnVtYmVyO1xuICAgIHB1YmxpYyBzdWNjZXNzOiBib29sZWFuO1xuICAgIHB1YmxpYyB0ZW1wUGF0aDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdXBUb2tlbjogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25DaGFuZ2U6IChyZXN1bHQ/OiBVcGxvYWRJbWFnZUl0ZW1PYmopID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih1cFRva2VuOiBzdHJpbmcsIHBhdGg6IHN0cmluZywgZmlsZU5hbWVQcmVmaXg6IHN0cmluZywgb25DaGFuZ2U6IChyZXN1bHQ/OiBVcGxvYWRJbWFnZUl0ZW1PYmopID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy51cFRva2VuID0gdXBUb2tlbjtcbiAgICAgICAgdGhpcy50ZW1wUGF0aCA9IHBhdGg7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoU3BsaXQgPSB0aGlzLnRlbXBQYXRoLnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHN1ZmZpeCA9IGZpbGVQYXRoU3BsaXRbZmlsZVBhdGhTcGxpdC5sZW5ndGggLSAxXTtcbiAgICAgICAgdGhpcy5maWxlTmFtZSA9IGAke2ZpbGVOYW1lUHJlZml4fV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyKX1fJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX0uJHtzdWZmaXh9YDtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgICAgIHRoaXMuc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gb25DaGFuZ2U7XG4gICAgfVxuXG4gICAgdXBsb2FkKCkge1xuICAgICAgICBjb25zdCB1cGxvYWRUYXNrID0gcWluaXVGaWxlVXBsb2FkKHRoaXMudGVtcFBhdGgsIHRoaXMuZmlsZU5hbWUsIHRoaXMudXBUb2tlbiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodGhpcyk7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHVwbG9hZFRhc2sub25Qcm9ncmVzc1VwZGF0ZShyZXMgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHJlcy5wcm9ncmVzcztcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH07XG59Il19